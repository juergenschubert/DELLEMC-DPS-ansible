---
###
# prepare your dd
# smt enable
#SMT enabled.
#create a tenant-unit
# sysadmin@ip-172-31-23-228# smt tenant-unit create tenant_unit_js
# Tenant-unit "tenant_unit_js" created.
#####################
# tasks file for ddve-post-object-aws
#1 wait for availabillit of ReST endpoint
- name: Wait until {{ DDVE_Public_IP }}/api/doc is comming online
  uri:
    validate_certs: false
    url: https://{{ DDVE_Public_IP }}/api/doc
    status_code: 200
    method: GET
  register: _result
  tags:
    - waitUntilAvailable
  until: _result.status == 200
  retries: 10 # 10 *60 seconds =  10 Minutes wait
  delay: 60 # Every 5 seconds
#2 get the Bear token from the DD
- name: login access token
  uri:
    validate_certs: false
    status_code: 201
    url: https://{{ DDVE_Public_IP }}:{{ Destination_Port }}/{{ resource_path_2 }}
    method: POST
    body: 
      username: sysadmin
      password: "{{ Current_Password | string }}"
    headers:
      Content-Type: application/json
    body_format: json
    return_content: true
  register: rest_post2
  tags:
    - getBearToken
  vars:
    resource_path_2: rest/v1.0/auth
#This is for debug reason and can be undcomented when needed
#- name: DEBUG / GOT INFO
#  debug:
#    msg: "{{ rest_post2.x_dd_auth_token }}"
#    msg: "{{ rest_post2 }}"
#  when: rest_post2.status ==  201
###############
#9 enable SMT is not enabled
# DDOS SHell ---- smt enable
#- name: enable SMT
#  raw: enable SMT
#  register: response_9
#  tags:
#    - enableSMT
#- name: DEBUG SMT enable / GOT INFO
#  debug:
#    msg: "{{ response_9 }}"
#10 create a smt tenant-unit 
#- name: create  smt tenant-unit 
#  raw: smt tenant-unit create tenant_unit_js
#  register: response_10
#  tags:
#    - createTenantUnit
#- name: DEBUG createTenantUnit / GOT INFO
#  debug:
#    msg: "{{ response_10 }}"
#3 create a new DD User
- name: create a new user in dd {{ New_DD_User }}
  uri:
    validate_certs: false
    status_code: 201
    url: https://{{ DDVE_Public_IP }}:{{ Destination_Port }}/{{ resource_path_3 }}
    method: POST
    body_format: json
    body:
      name: "{{ New_DD_User | string }}"
      password: "{{ New_User_Password | string }}"
      role: 'none'
    headers:
      X-DD-AUTH-TOKEN: "{{ rest_post2.x_dd_auth_token }}"
      Content-Type: 'application/json'
    return_content: true
  register: rest_response3
  tags:
    - createnewdduser
  vars:
    resource_path_3: rest/v1.0/dd-systems/0/users
#This is for debug reason and can be undcomented when needed
#- name: DEBUG DD default password change / GOT INFO
#  debug:
#    msg: "{{ rest_response3 }}"
#  tags:
#    - changeLoginPassword
#  when: rest_response3.status ==  200
#4 add DataDomain LSU
- name: add a new DD LSU {{ New_DD_LSU_Name }}
  uri:
    validate_certs: false
    status_code: 201
    url: https://{{ DDVE_Public_IP }}:{{ Destination_Port }}/{{ resource_path_4 }}
    method: POST
    body_format: json
    body: 
       { "name":"{{ New_DD_LSU_Name }}","user":"nonuser","tenant_unit":"tenant_unit_js" }
 #      {"name":"storage-unit-js","user":"sysadmin","tenant_unit":"tenant_unit_js","quota_config":{"hard_limit":1048577,"soft_limit":1048576},"report_physical_size":123,"stream_limit_config":{"write_stream_soft_limit":123,"read_stream_soft_limit":123,"repl_stream_soft_limit":123,"combined_stream_soft_limit":123,"combined_stream_hard_limit":123}}
    headers:
      X-DD-AUTH-TOKEN: "{{ rest_post2.x_dd_auth_token }}"
      Content-Type: 'application/json'
    return_content: true
  register: rest_response4
  tags:
    - addLSU
  vars:
    resource_path_4: rest/v1.0/dd-systems/0/protocols/ddboost/storage-units
#This is for debug reason and can be undcomented when needed
#- name: DEBUG DD update license / GOT INFO
#  debug:
#    msg: "{{ rest_response4 }}"
#  tags:
#    - addLicense
#  when: rest_response4.status ==  200
#5 change or create a new passphrase
