---
- name: "PowerProtect Data Manager stack deployment demo"
  hosts: localhost
  become: no
  gather_facts: false
 
  vars:
  vars_files:
    - stack_vars.yml

  tasks:
  - name: Start time for the deployment
    debug: msg="{{ lookup('pipe','date +%H:%M:%S') }}"
# DEPLOY THE POWER PROTECT OVA STACK TO VCENTER
  - name: Check that the DDVE OVA exists
    stat:
      path: "{{ ddve_ova }}"
      get_checksum: no
      get_md5: no
    register: stat_resultdd
#  - name: debug ova exist
#    debug:
#      msg: return value {{ stat_resultdd }}
  - name: Check that the PPDM OVA exists
    stat:
      path: "{{ ppdm_ova }}"
      get_checksum: no
      get_md5: no
    register: stat_resultppdm
#  - name: debug ova exist
#    debug:
#      msg: return value {{ stat_resultppdm }}
  - name: Deploy PowerProtect Data Manager
    vmware_deploy_ovf:
      hostname: "{{vcenter_host}}"
      username: "{{vcenter_acct}}"
      password: "{{vcenter_pwd}}"
      validate_certs: no
      name: "{{ppdm_host}}"
      datacenter: "{{vcenter_dc}}"
      datastore: "{{vcenter_ds}}"
      folder: "{{vcenter_folder}}"
      disk_provisioning: thin
      networks: 
        "VM Network": "{{vcenter_network}}"
      ova: "{{ppdm_ova}}"
      allow_duplicates: no
      fail_on_spec_warnings: no
      wait: no
      wait_for_ip_address: no
      inject_ovf_env: yes
      properties:
        vami.fqdn.brs: "{{ppdm_host}}.{{ad_domain}}"
        vami.ip0.brs: "{{ppdm_ip}}"
        vami.netmask0.brs: "{{ppdm_netmask}}"
        vami.gateway.brs: "{{ppdm_gateway}}"
        vami.DNS.brs: "{{ppdm_dns}}"
      power_on: yes
    delegate_to: localhost

# DEPLOY THE DDVE OVA TO VCENTER
  - name: Deploy PowerProtect Data Domain
    vmware_deploy_ovf:
      hostname: "{{vcenter_host}}"
      username: "{{vcenter_acct}}"
      password: "{{vcenter_pwd}}"
      validate_certs: no
      name: "{{ddve_host}}"
      datacenter: "{{vcenter_dc}}"
      folder: "{{vcenter_folder}}"
      datastore: "{{vcenter_ds}}"
      disk_provisioning: thin
      networks: 
        "VM Network 1": "{{vcenter_network}}"
        "VM Network 2": "{{vcenter_network}}"
      ova: "{{ddve_ova}}"
      allow_duplicates: no
      fail_on_spec_warnings: no
      wait: no
      wait_for_ip_address: no
      inject_ovf_env: yes
      properties:
        hostname: "{{ddve_host}}.{{ad_domain}}"
        ipAddress: "{{ddve_ip}}"
        netmask: "{{ddve_netmask}}"
        gateway: "{{ddve_gateway}}"
        dnsServer1: "{{ddve_dns1}}"
        dnsServer2: "{{ddve_dns2}}"
      power_on: yes
    delegate_to: localhost
  - name: End time of both ova deployments
    debug: msg="{{ lookup('pipe','date +%H:%M:%S') }}"
 # ADD VDISK TO DDVE FOR ACTIVE TIER 
  - name: "( {{ddve_host}}.{{ad_domain}} ): Adding {{ddve_disk_size}} GiB disk for active tier."
    vmware_guest_disk:
      hostname: "{{vcenter_host}}"
      username: "{{vcenter_acct}}"
      password: "{{vcenter_pwd}}"
      datacenter: "{{vcenter_dc}}"
      name: "{{ddve_host}}"
      disk:
        - size_gb: "{{ddve_disk_size}}"
          type: "{{ddve_disk_type}}"
          state: present
          datastore: "{{vcenter_ds}}"
          disk_mode: "independent_persistent"
          scsi_controller: 0
          unit_number: 2
      validate_certs: no
    delegate_to: localhost
    register: disk_facts

# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA DOMAIN  
  - name: "( {{ddve_host}}.{{ad_domain}} ): Waiting for HTTPS connectivity."
    wait_for:
      host: "{{ddve_host}}.{{ad_domain}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforddve

# AUTHENTICATE TO DDVE REST API
  - name: "( {{ddve_host}}.{{ad_domain}} ): Authenticate to PowerProtect DD REST API"
    uri:
      url: https://{{ddve_host}}.{{ad_domain}}:3009/rest/v1.0/auth
      method: POST
      force_basic_auth: no
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {
          "username": "{{ddve_acct}}",
          "password": "{{ddve_old_pwd}}"
        }
      status_code: 201
    register: dd_token

  - name: Result from get access token
    debug:
      var:  dd_token.x_dd_auth_token

# ADD DEV3 DISK TO THE ACTIVE TIER
  - name: "( {{ddve_host}}.{{ad_domain}} ): Add dev3 to the active tier"
    uri:
      url: https://{{ddve_host}}.{{ad_domain}}:3009/api/v1/dd-systems/0/file-systems/block-storages
      method: PUT
      headers:
        X-DD-AUTH-TOKEN: "{{dd_token.x_dd_auth_token}}"
        Content-Type: "application/json"
      force_basic_auth: no
      validate_certs: no
      body_format: json
      body: |
        {
          "disks": [
            "dev3"
          ]
        }
      return_content: yes
      status_code: 200
    register: disks

# CREATE THE FILESYSTEM
  - name: "( {{ddve_host}}.{{ad_domain}} ): Create the filesystem"
    uri:
      url: https://{{ddve_host}}.{{ad_domain}}:3009/rest/v1.0/dd-systems/0/file-systems
      method: PUT
      headers:
        X-DD-AUTH-TOKEN: "{{dd_token.x_dd_auth_token}}"
        Content-Type: "application/json"
      force_basic_auth: no
      validate_certs: no
      body_format: json
      body: |
        {
          "operation": "create",
          "write_zeros": false
        }
      timeout: 600
      return_content: yes
      status_code: 200
    register: create_filesys

# ENABLE THE FILESYSTEM
  - name: "( {{ddve_host}}.{{ad_domain}} ): Enable the filesystem"
    uri:
      url: https://{{ddve_host}}.{{ad_domain}}:3009/rest/v1.0/dd-systems/0/file-systems
      method: PUT
      headers:
        X-DD-AUTH-TOKEN: "{{dd_token.x_dd_auth_token}}"
        Content-Type: "application/json"
      force_basic_auth: no
      validate_certs: no
      body_format: json
      body: |
        {
          "operation": "enable"
        }
      timeout: 600
      return_content: yes
      status_code: 200
    register: enable_filesys

# ENABLE THE DDBOOST PROTOCOL
  - name: "( {{ddve_host}}.{{ad_domain}} ): Enable the boost protocol"
    uri:
      url: https://{{ddve_host}}.{{ad_domain}}:3009/rest/v1.0/dd-systems/0/protocols/ddboost
      method: PUT
      headers:
        X-DD-AUTH-TOKEN: "{{dd_token.x_dd_auth_token}}"
        Content-Type: "application/json"
      force_basic_auth: no
      validate_certs: no
      body_format: json
      body: |
        {
          "operation": "enable"
        }
      return_content: yes
      status_code: 200
    register: boost

# SET THE SYSTEM PASSPHRASE
  - name: "( {{ddve_host}}.{{ad_domain}} ): Set the system passphrase"
    uri:
      url: https://{{ddve_host}}.{{ad_domain}}:3009/rest/v3.0/dd-systems/0/systems
      method: PUT
      headers:
        X-DD-AUTH-TOKEN: "{{dd_token.x_dd_auth_token}}"
        Content-Type: "application/json"
      force_basic_auth: no
      validate_certs: no
      body_format: json
      body: |
        {
          "operation": "set_pphrase",
          "pphrase_request": {
            "new_pphrase": "{{common_pwd}}"
          }
        }
      return_content: yes
      status_code: 200
    register: passphrase

# UPDATE THE SYSADMIN PASSWORD
  - name: "( {{ddve_host}}.{{ad_domain}} ): Set the sysadmin password"
    uri:
      url: https://{{ddve_host}}.{{ad_domain}}:3009/rest/v1.0/dd-systems/0/users/{{ddve_acct}}
      method: PUT
      headers:
        X-DD-AUTH-TOKEN: "{{dd_token.x_dd_auth_token}}"
        Content-Type: "application/json"
      force_basic_auth: no
      validate_certs: no
      body_format: json
      body: |
        {
          "current_password": "{{ddve_old_pwd}}",
          "new_password": "{{common_pwd}}"
        }
      return_content: yes
      status_code: 200
    register: password

# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA MANAGER  
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Wait for HTTPS connectivity"
    wait_for:
      host: "{{ppdm_host}}.{{ad_domain}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforppdm

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Authenticate to PowerProtect DM Rest API"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/login
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: admin
        password: "{{ppdm_old_pwd}}"
      status_code: 200
    register: token
    
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display bearer token"
    debug:
      var: token.json.access_token

# ACCEPT THE POWERPROTECT EULA
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Accept the PowerProtect EULA"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/eulas/PPDM
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PATCH
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "accepted":true
          }
      status_code: 200
    register: eula
  
# GET THE INITIAL CONFIGURATION ID
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Get the initial PowerProtect configuration"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/configurations
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: config
  
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the initial PowerProtect configuration id"
    debug:
      var: config.json.content[0].id

# START THE INITIAL CONFIGURATION
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Start the initial PowerProtect configuration - {{config.json.content[0].id}}"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/configurations/{{config.json.content[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "id": "{{config.json.content[0].id}}",
            "nodeId": "{{config.json.content[0].nodeId}}",
            "networks": [
                {
                    "fqdn": "{{ppdm_host}}.{{ad_domain}}",
                    "ipAddress": [
                        "{{ppdm_ip}}"
                    ],
                    "ipAddressFamily": "{{config.json.content[0].networks[0].ipAddressFamily}}",
                    "interfaceName": "{{config.json.content[0].networks[0].interfaceName}}",
                    "netMask": "{{ppdm_netmask}}",
                    "gateway": "{{ppdm_gateway}}",
                    "dnsServers": [
                        "{{ppdm_dns}}"
                    ],
                    "nslookupSuccess": true
                },
                {
                    "ipAddress": [
                        "{{config.json.content[0].networks[1].ipAddress[0]}}"
                    ],
                    "ipAddressFamily": "{{config.json.content[0].networks[1].ipAddressFamily}}",
                    "interfaceName": "{{config.json.content[0].networks[1].interfaceName}}",
                    "netMask": "{{config.json.content[0].networks[1].netMask}}"
                }
            ],
            "ntpServers": [
                "{{ppdm_ntp}}"
            ],
            "timeZone": "{{ppdm_timezone}}",
            "osUsers": [
                {
                    "userName": "root",
                    "description": "OS root user account",
                    "numberOfDaysToExpire": 60,
                    "password": "changeme",
                    "newPassword": "{{common_pwd}}"
                },
                {
                    "userName": "admin",
                    "description": "OS administrator user account",
                    "numberOfDaysToExpire": 60,
                    "password": "@ppAdm1n",
                    "newPassword": "{{common_pwd}}"
                },
                {
                    "userName": "support",
                    "description": "OS support user account",
                    "numberOfDaysToExpire": 60,
                    "password": "$upp0rt!",
                    "newPassword": "{{common_pwd}}"
                }
            ],
            "lockbox": {
                "name": "Lockbox",
                "lastUpdatedTime": "{{config.json.content[0].lockbox.lastUpdatedTime}}",
                "passphrase": "Ch@ngeme1",
                "newPassphrase": "{{common_pwd}}"
            },
            "configType": "standalone",
            "gettingStartedCompleted": false,
            "autoSupport": false,
            "integratedStorageSecuritySetupCompleted": false,
            "deployedPlatform": "VMWARE",
            "applicationUserPassword": "{{common_pwd}}"
          }
      status_code: 202
    register: start_config
  
# GET THE CONFIG STATUS
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Check the PowerProtect config status to see if it is complete"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/configurations/{{config.json.content[0].id}}/config-status
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: monitor
    until: monitor.status == 200 and monitor.json.percentageCompleted == 100
    retries: 60
    delay: 30

# GET THE DD CERTIFICATE
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Get the Data Domain certificate"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/certificates?host={{ddve_host}}.{{ad_domain}}&port=3009&type=Host
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 200
    register: dd_cert
    until: dd_cert.status == 200
    retries: 90
    delay: 10

  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the Data Domain certificate"
    debug:
      var: dd_cert.json[0]


# ACCEPT THE DD CERTIFICATE
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Accept the Data Domain certificate"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/certificates/{{dd_cert.json[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "fingerprint": "{{dd_cert.json[0].fingerprint}}",
            "host": "{{dd_cert.json[0].host}}",
            "id": "{{dd_cert.json[0].id}}",
            "issuerName": "{{dd_cert.json[0].issuerName}}",
            "notValidAfter": "{{dd_cert.json[0].notValidAfter}}",
            "notValidBefore": "{{dd_cert.json[0].notValidBefore}}",
            "port": "{{dd_cert.json[0].port}}",
            "state": "ACCEPTED",
            "subjectName": "{{dd_cert.json[0].subjectName}}",
            "type": "{{dd_cert.json[0].type}}"
          }
      status_code: 200
    register: accept_dd_cert
    until: accept_dd_cert.status == 200
    retries: 90
    delay: 10

  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the Data Domain Certificate"
    debug:
      var: accept_dd_cert.json

# CREATE DATA DOMAIN CREDENTIALS
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Create Data Domain credentials"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/credentials
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "type": "DATADOMAIN",
              "username": "{{ddve_acct}}",
              "password": "{{common_pwd}}",
              "name": "SYSADMIN"
          }
      status_code: [200,201,403]
    register: dd_creds
    until: dd_creds.status == 200 or dd_creds.status == 201 or dd_creds.status == 403
    retries: 90
    delay: 10

  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the credentials response"
    debug:
      var: dd_creds.json

# ADD THE DATA DOMAIN STORAGE SYSTEM
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Add Data Domain storage system"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/inventory-sources
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "type": "EXTERNALDATADOMAIN",
            "name": "{{ddve_host}}",
            "port": 3009,
            "credentials": {
              "id": "{{dd_creds.json.id}}"
            },
            "address": "{{ddve_host}}.{{ad_domain}}"
          }
      status_code: 201
    register: storage
  
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the storage add response"
    debug:
      var: storage.json

# GET THE VCENTER CERTIFICATE
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Get the vCenter Certificate"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/certificates?host={{vcenter_host}}&port=443&type=Host
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 200
    register: vc_cert
    until: vc_cert.status == 200
    retries: 90
    delay: 10

  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the vCenter certificate"
    debug:
      var: vc_cert.json[0]


# ACCEPT THE VCENTER CERTIFICATE
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Accept the vCenter certificate"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/certificates/{{vc_cert.json[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "fingerprint": "{{vc_cert.json[0].fingerprint}}",
            "host": "{{vc_cert.json[0].host}}",
            "id": "{{vc_cert.json[0].id}}",
            "issuerName": "{{vc_cert.json[0].issuerName}}",
            "notValidAfter": "{{vc_cert.json[0].notValidAfter}}",
            "notValidBefore": "{{vc_cert.json[0].notValidBefore}}",
            "port": "{{vc_cert.json[0].port}}",
            "state": "ACCEPTED",
            "subjectName": "{{vc_cert.json[0].subjectName}}",
            "type": "{{vc_cert.json[0].type}}"
          }
      status_code: 200
    register: accept_vc_cert
    until: accept_vc_cert.status == 200
    retries: 90
    delay: 10

  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the vCenter certificate"
    debug:
      var: accept_vc_cert.json

# CREATE VCENTER CREDENTIALS
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Create vCenter credentials"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/credentials
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "type": "VCENTER",
              "username": "{{vcenter_acct}}",
              "password": "{{vcenter_pwd}}",
              "name": "ADMINISTRATOR"
          }
      status_code: [200,201,403]
    register: vc_creds
    until: vc_creds.status == 200 or vc_creds.status == 201 or vc_creds.status == 403
    retries: 90
    delay: 10

  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the credentials response"
    debug:
      var: vc_creds.json

# ADD THE VCENTER SERVER
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Add the vCenter server"
    uri:
      url: https://{{ppdm_host}}.{{ad_domain}}:8443/api/v2/inventory-sources
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "type": "VCENTER",
            "name": "{{vcenter_host}}",
            "port": 443,
            "credentials": {
              "id": "{{vc_creds.json.id}}"
            },
            "address": "{{vcenter_host}}"
          }
      status_code: 201
    register: vcenter
  
  - name: "( {{ppdm_host}}.{{ad_domain}} ): Display the vCenter add response"
    debug:
      var: vcenter.json
  - name: End time for the deployment
    debug: 
      msg="{{ lookup('pipe','date +%H:%M:%S') }}"
